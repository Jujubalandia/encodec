/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/
 
package cm.encodec.bmeval;

use cm: core, runtime;

{
    pln("Hello, CM Language World!");
    

    // Assignment statement
    str mensagem = "Hello, CM Language!";

    // Method call statement
    pln(mensagem);

    int idade = 20;

    // Control flow statement
    if (idade >= 18) {
        pln("Maior de idade");
    }

    // Express√µes aritm√©ticas
    //int resultado = (a + b) * c;
    //double media = (nota1 + nota2 + nota3) / 3.0;
    //pln("Resultado: " # resultado);
    //pln("M√©dia: " # media);

    // Express√µes l√≥gicas
    //bool isValid = (idade >= 0) && (idade <= 120);
    //pln("Idade v√°lida: " # isValid);

    str nome = "Jo√£o";
    // Express√µes de concatena√ß√£o de strings
    str saudacao = "Ol√°, " # nome # "!";
    pln(saudacao);
    // Express√µes condicionais (tern√°rio)
    double nota = 8.5;
    str status = (nota >= 7.0) ? "Aprovado" : "Reprovado";
    pln("Status: " # status);

    // Tipos num√©ricos
    int idade2 = 25;                    // Inteiro de 32 bits
    //long populacao = 8000000000L;      // Inteiro de 64 bits
    float prec2 = 19.99f;              // Ponto flutuante de precis√£o simples
    double precisao = 3.14159265359;   // Ponto flutuante de precis√£o dupla

    // Tipos textuais
    char inicial = 'J';                // Caractere √∫nico
    str nome2 = "Configuration Magic";   // String de tamanho vari√°vel

    // Tipo l√≥gico
    bool ativo = true;                 // Verdadeiro ou falso

    // Arrays
    //int[] numeros = int[]();
    //str[] nomes = new str[10];

    // Objetos
    //Object obj = Object();
    //Point3D ponto = Point3D(1.0, 2.0, 3.0);

    double area = calcularArea(5.0, 10.0);
    pln("√Årea do ret√¢ngulo: " # area);

    //CalculadoraBasica calc = new CalculadoraBasica();
    //double resultado = calc.calcular(10.0, 5.0, "+");
    //pln("Resultado da soma: " # resultado); 
    //calc.resultado = resultado;
    //str avaliacao = calc.avaliarResultado();
    //pln("Avalia√ß√£o do resultado: " # avaliacao);    

    // int - 32 bits com sinal
    int idade10 = 25;
    int temperatura = -15;
    int maxInt = 2147483647;    // Valor m√°ximo
    int minInt = -2147483648;   // Valor m√≠nimo

    // int8 - 8 bits com sinal  
    int8 pequeno = 127;
    int8 menor = -128;

    // int16 - 16 bits com sinal
    int16 medio = 32767;
    int16 medioNeg = -32768;

    // int64 - 64 bits com sinal
    int64 grandeNumero = 9223372036854775807i64;
    int64 negativo = -9223372036854775808i64;

    // nat - 32 bits sem sinal (natural)
    nat populacao = 42949695;
    nat contador = 0;

    // byte - 8 bits sem sinal
    byte valor = 255;
    byte inicio = 0;

    // word - 16 bits sem sinal  
    word endereco1 = 65535;

        // float - precis√£o simples (32 bits)
    float preco3 = 19.99f;
    float temperatura1 = -273.15f;
    float pi = 3.14159f;

    // double - precis√£o dupla (64 bits)
    double precisao1 = 3.141592653589793;
    double calculo1 = 1.7976931348623157e+308;  // Valor m√°ximo
    double minimo1 = 4.9406564584124654e-324;   // Valor m√≠nimo positivo

    // char - caractere UTF-16 (16 bits)
    char letra = 'A';
    char unicode = '√±';
    char emoji = 'üòÄ';
    pln("Caractere: " # emoji);

    // cchar - caractere ANSI C (8 bits)
    //cchar simples = '1';
    //cchar numero = '7';

    // str8 - encoding UTF-8 vari√°vel
    str internacional = "Hello ‰∏ñÁïå üåç";
    pln("String UTF-8: " # internacional);
    str multilingual = "Bonjour, ŸÖÿ±ÿ≠ÿ®ÿß, „Åì„Çì„Å´„Å°„ÅØ";
    pln("Multilingual String: " # multilingual);


    // Declara√ß√£o de arrays
    int[] numeros = [10,5,6,4,34,67,89,33];        // Array fixo de 10 inteiros
    //str[] nomes = str[5];           // Array fixo de 5 strings

    // Inicializa√ß√£o com valores
    int[] valores = [1, 2, 3, 4, 5];
    str[] linguagens = ["CM", "Java", "C++"];
    double[] coordenadas = [10.5, 20.3, 15.7];

    // Acesso aos elementos
    numeros[0] = 42;
    pln("Primeiro n√∫mero: " # numeros[0]);  // 42
    str primeira = linguagens[0];       // "CM"
    pln("Primeira linguagem: " # primeira);  // "CM"
    int tamanho = valores.count;        // 5


    // Array bidimensional (matriz)
    //int[][] matriz = new int[3][4];     // 3 linhas, 4 colunas
    //matriz[0][0] = 10;
    //matriz[1][2] = 25;

    // Matriz com inicializa√ß√£o
    /*
    double[][] pontos = [
        [0.0, 0.0, 0.0],
        [1.0, 1.0, 1.0],
        [2.0, 2.0, 2.0]
    ];
    */

    // Array tridimensional
    //int[][][] cubo = new int[3][3][3];

    // Listas din√¢micas (equivalente a ArrayList)
    //int[] lista = int[]();              // Lista vazia
    //lista.add(10);
    //lista.add(20);
    //lista.add(30);

    // Manipula√ß√£o de listas
    //int primeiro = lista[0];            // 10
    //lista.remove(1);                    // Remove elemento no √≠ndice 1
    //int tamanho = lista.count;          // 2

    // Sets (conjuntos)
    //str{} cores = str{}();
    //cores.add("vermelho");
    //cores.add("azul");
    //cores.add("verde");
    //cores.add("azul");                  // N√£o ser√° adicionado (duplicata)

    //bool contemVerde = cores.contains("verde");  // true
    /*
    private enum status : field access {
        inativo = 0;        // Valor padr√£o obrigat√≥rio
        ativo = 1;
        suspenso = 2;
        erro = 3;
    }
    */

    // Uso da enumera√ß√£o
    // status estadoAtual = status.ativo;
    // pln("Status atual: " # estadoAtual);


    // Exemplo de convers√µes expl√≠citas
    exemploConversoesExplicitas();

    // Exemplo de limites de tipos
    mostrarLimitesDetipos();



    pln("Tchau to Configura Magic!!!!");



}





/*
public void exemploGerenciamentoNull() {
    str? textoOpcional = null;          // Pode ser null
    str textoObrigatorio = "Hello";     // N√£o pode ser null
    
    // Verifica√ß√£o segura de null
    if (textoOpcional != null) {
        pln("Texto: " # textoOpcional);
    } else {
        pln("Texto √© null");
    }
    
    // Opera√ß√£o segura com null
    str resultado = textoOpcional?.toUpperCase() ?? "TEXTO PADR√ÉO";
    pln("Resultado: " # resultado);
}
*/


/* 

public class Produto extends Object {
    
    // Campos privados
    private str nome;
    private double preco;
    private int quantidadeEstoque;
    private bool disponivel;
    
    // Construtor
    public constructor(str nome, double preco) {
        this.nome = nome;
        this.preco = preco;
        this.quantidadeEstoque = 0;
        this.disponivel = true;
    }
    
    // M√©todos p√∫blicos
    public str obterNome() {
        return this.nome;
    }
    
    public void definirPreco(double novoPreco) {
        if (novoPreco >= 0.0) {
            this.preco = novoPreco;
        }
    }
    
    public double calcularValorTotal(int quantidade) {
        return this.preco * quantidade;
    }
    
    //extend bool isDisponivel() {
    //    return this.disponivel and this.quantidadeEstoque > 0;
    //}
}

*/


/*
public class ConfiguracaoSistema extends Object {
    
    // Constantes de classe
    //private const str VERSAO = "3.1.0";
    private const int MAX_CONEXOES = 100;
    private const double PI = 3.141592653589793;
    private const bool DEBUG_HABILITADO = true;
    
    // Constantes com tipos espec√≠ficos
    private const int64 TIMESTAMP_INICIO = 1640995200000i64;
    private const float TOLERANCIA = 0.001f;
    
    public void mostrarConstantes() {
        pln("Vers√£o do sistema: " # VERSAO);
        pln("M√°ximo de conex√µes: " # MAX_CONEXOES);
        pln("Valor de PI: " # PI);
        pln("Debug habilitado: " # DEBUG_HABILITADO);
    }
}
*/

public void mostrarLimitesDetipos() {
    // Constantes de int
    pln("int m√≠nimo: " # minInt);               // -2147483648
    pln("int m√°ximo: " # maxInt);               // 2147483647
    
    // Constantes de byte
    pln("byte m√≠nimo: " # minByte);             // 0
    pln("byte m√°ximo: " # maxByte);             // 255
    
    // Constantes de double
    pln("double m√≠nimo: " # minDouble);         // -1.79769e+308
    pln("double m√°ximo: " # maxDouble);         // 1.79769e+308
    
    // Constantes de float
    pln("float m√≠nimo: " # minFloat);           // -3.40282e+038
    pln("float m√°ximo: " # maxFloat);           // 3.40282e+038
}


public void exemploConversoesExplicitas() {
    // Convers√µes que podem causar perda de dados
    double valorPreciso = 123.456;
    int valorInteiro = valorPreciso.int;        // 123 (truncado)
    
    // Convers√£o entre tipos de diferentes tamanhos
    int64 numeroGrande = 9876543210i64;
    int numeroMenor = numeroGrande.int;         // Poss√≠vel overflow
    
    // Convers√£o usando operador .:
    float numeroFloat = 45.67f;
    int numeroTruncado = numeroFloat.: int;     // 45
    
    // Verifica√ß√£o de convers√£o bem-sucedida
    Object objeto = Double(42.5);
    //int? resultado = objeto.int();                // null se falhar
    
    if (objeto != null) {
        pln("Convers√£o bem-sucedida: " # objeto);
    } else {
        pln("Convers√£o falhou");
    }
}


/**
 * Calcula a √°rea de um ret√¢ngulo.
 * 
 * @param largura A largura do ret√¢ngulo
 * @param altura A altura do ret√¢ngulo
 * @return A √°rea calculada
 */
public double calcularArea(double largura, double altura) {
    return largura * altura;
}


/**
 * Calculadora simples demonstrando sintaxe b√°sica
 */
public class CalculadoraBasica extends Object {
    
    private str operacao;
    private double resultado;
    
    public constructor() {
        this.operacao = "";
        this.resultado = 0.0;
    }
    
    /**
     * Executa opera√ß√£o aritm√©tica b√°sica
   
    public double calcular(double a, double b, str op) {
        switch (op) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": {
                if (b != 0.0) {
                    return a / b;
                } else {
                    pln("Erro: Divis√£o por zero!");
                    return 0.0;
                }
            }
            default: {
                pln("Opera√ß√£o inv√°lida: " # op);
                return 0.0;
            }
        }
    }

      */
    /**
     * Demonstra uso de express√µes condicionais
     
    public str avaliarResultado(double resultado) {
        return (this.resultado >= 0) ? "Positivo" : "Negativo";
    }
    */

}



